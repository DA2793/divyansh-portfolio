import {
  __commonJS,
  __require
} from "./chunk-QJQ2N2BE.js";

// browser-external:fs
var require_fs = __commonJS({
  "browser-external:fs"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "fs" has been externalized for browser compatibility. Cannot access "fs.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/pdf-parse/lib/pdf-parse.js
var require_pdf_parse = __commonJS({
  "node_modules/pdf-parse/lib/pdf-parse.js"(exports, module) {
    var PDFJS = null;
    function render_page(pageData) {
      let render_options = {
        //replaces all occurrences of whitespace with standard spaces (0x20). The default value is `false`.
        normalizeWhitespace: false,
        //do not attempt to combine same line TextItem's. The default value is `false`.
        disableCombineTextItems: false
      };
      return pageData.getTextContent(render_options).then(function(textContent) {
        let lastY, text = "";
        for (let item of textContent.items) {
          if (lastY == item.transform[5] || !lastY) {
            text += item.str;
          } else {
            text += "\n" + item.str;
          }
          lastY = item.transform[5];
        }
        return text;
      });
    }
    var DEFAULT_OPTIONS = {
      pagerender: render_page,
      max: 0,
      //check https://mozilla.github.io/pdf.js/getting_started/
      version: "v1.10.100"
    };
    async function PDF(dataBuffer, options) {
      var isDebugMode = false;
      let ret = {
        numpages: 0,
        numrender: 0,
        info: null,
        metadata: null,
        text: "",
        version: null
      };
      if (typeof options == "undefined")
        options = DEFAULT_OPTIONS;
      if (typeof options.pagerender != "function")
        options.pagerender = DEFAULT_OPTIONS.pagerender;
      if (typeof options.max != "number")
        options.max = DEFAULT_OPTIONS.max;
      if (typeof options.version != "string")
        options.version = DEFAULT_OPTIONS.version;
      if (options.version == "default")
        options.version = DEFAULT_OPTIONS.version;
      PDFJS = PDFJS ? PDFJS : __require(`./pdf.js/${options.version}/build/pdf.js`);
      ret.version = PDFJS.version;
      PDFJS.disableWorker = true;
      let doc = await PDFJS.getDocument(dataBuffer);
      ret.numpages = doc.numPages;
      let metaData = await doc.getMetadata().catch(function(err) {
        return null;
      });
      ret.info = metaData ? metaData.info : null;
      ret.metadata = metaData ? metaData.metadata : null;
      let counter = options.max <= 0 ? doc.numPages : options.max;
      counter = counter > doc.numPages ? doc.numPages : counter;
      ret.text = "";
      for (var i = 1; i <= counter; i++) {
        let pageText = await doc.getPage(i).then((pageData) => options.pagerender(pageData)).catch((err) => {
          debugger;
          return "";
        });
        ret.text = `${ret.text}

${pageText}`;
      }
      ret.numrender = counter;
      doc.destroy();
      return ret;
    }
    module.exports = PDF;
  }
});

// node_modules/pdf-parse/index.js
var require_pdf_parse2 = __commonJS({
  "node_modules/pdf-parse/index.js"(exports, module) {
    var Fs = require_fs();
    var Pdf = require_pdf_parse();
    module.exports = Pdf;
    var isDebugMode = !module.parent;
    if (isDebugMode) {
      let PDF_FILE = "./test/data/05-versions-space.pdf";
      let dataBuffer = Fs.readFileSync(PDF_FILE);
      Pdf(dataBuffer).then(function(data) {
        Fs.writeFileSync(`${PDF_FILE}.txt`, data.text, {
          encoding: "utf8",
          flag: "w"
        });
        debugger;
      }).catch(function(err) {
        debugger;
      });
    }
  }
});
export default require_pdf_parse2();
//# sourceMappingURL=pdf-parse.js.map
